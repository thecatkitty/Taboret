// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Taboret.Data;

namespace Taboret.Migrations
{
    [DbContext(typeof(ArchiveContext))]
    [Migration("20210913154735_Pierwsza migracja")]
    partial class Pierwszamigracja
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("ArticleAuthor", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArticlesId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("ArticleAuthor");
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArticlesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ArticleTag");
                });

            modelBuilder.Entity("AuthorIssue", b =>
                {
                    b.Property<int>("CoverAuthorsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoversSignature")
                        .HasColumnType("TEXT");

                    b.HasKey("CoverAuthorsId", "CoversSignature");

                    b.HasIndex("CoversSignature");

                    b.ToTable("AuthorIssue");
                });

            modelBuilder.Entity("Taboret.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IssueSignature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lead")
                        .HasColumnType("TEXT");

                    b.Property<uint>("OrdinalNumber")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Page")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Subject")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<uint>("WordCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("IssueSignature");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Taboret.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComparableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Taboret.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComparableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Taboret.Models.Issue", b =>
                {
                    b.Property<string>("Signature")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverSignature")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MagazineSignature")
                        .HasColumnType("TEXT");

                    b.Property<uint>("PageCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Signature");

                    b.HasIndex("MagazineSignature");

                    b.ToTable("Issue");
                });

            modelBuilder.Entity("Taboret.Models.Magazine", b =>
                {
                    b.Property<string>("Signature")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Signature");

                    b.ToTable("Magazine");
                });

            modelBuilder.Entity("Taboret.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ComparableName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ArticleAuthor", b =>
                {
                    b.HasOne("Taboret.Models.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taboret.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("Taboret.Models.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taboret.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthorIssue", b =>
                {
                    b.HasOne("Taboret.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("CoverAuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taboret.Models.Issue", null)
                        .WithMany()
                        .HasForeignKey("CoversSignature")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Taboret.Models.Article", b =>
                {
                    b.HasOne("Taboret.Models.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Taboret.Models.Issue", "Issue")
                        .WithMany("Articles")
                        .HasForeignKey("IssueSignature");

                    b.Navigation("Category");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Taboret.Models.Issue", b =>
                {
                    b.HasOne("Taboret.Models.Magazine", "Magazine")
                        .WithMany("Issues")
                        .HasForeignKey("MagazineSignature");

                    b.Navigation("Magazine");
                });

            modelBuilder.Entity("Taboret.Models.Category", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Taboret.Models.Issue", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Taboret.Models.Magazine", b =>
                {
                    b.Navigation("Issues");
                });
#pragma warning restore 612, 618
        }
    }
}
